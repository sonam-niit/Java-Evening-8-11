Polymorphism
_________________________________________
Samme thing can be used in many forms

here we are using this in the form of methods

1. Compiletime polymorphism(static polymormism/ early binding/ method overloading)
_______________________________________________________________________________________

same method name we can reuse multiple times

same method name 
parameters must be diffrent (diffrent in the form of datatypes)
in the same class

return type doen't matter here.

______________________________________________________________________________________

package com.simplilearn.polymorphism;

public class MethodOverloading {

	public int add(int a,int b) {
		return a+b;
	}
	public float add(float a,float b) {
		return a+b;
	}
	public double add (double a,int b) {
		return a+b;
	}
	public int add(int a,int b, int c) {
		return a+b+c;
	}
	
	public static void main(String[] args) {
		MethodOverloading m= new MethodOverloading();
		
		System.out.println(m.add(23, 56));
		System.out.println(m.add(6.0, 89));
		System.out.println(m.add(5.9f, 89.0f));
		System.out.println(m.add(4, 8, 9));
	}
}

_______________________________________________________________________________________

2. Runtime polymorphism (late binding, dynamic polymorphism/ method overriding)

(when inheritance implemented then only method overiding needs to be take care)

same method name 
same parameter
but one method is in parent class and another method is in child class

when child is having same method which father has then child will override the fathers method and will use its own method.


package com.simplilearn.polymorphism;

public class Parent {

	public void mobile() {
		System.out.println("Calling teacher from fathers phone");
	}
}


package com.simplilearn.polymorphism;

public class Child extends Parent{

	public void mobile() {
		//super.mobile(); //to call explicitly fathers mobile method
		System.out.println("Calling teacher from Own phone");
	}
	
	public static void main(String[] args) {
		
		Child c= new Child();
		c.mobile(); //child will override parent mobile method
	}
}
__________________________________________________________________________________________

Array: sequence of similar types of data
----------------------------------------------------

array index always start from 0

array size is fixed when we will declare it at that time we need to define
________________________________________________________________________________

Single Dimentional Array
________________________________________
package com.simplilearn.polymorphism;

public class SDArray {

	public static void main(String[] args) {
		
		int a[]= new int[5]; //one way
		//index numbers 0-4
		
		a[0]=10;
		a[1]=20;
		a[2]=30;
		a[3]=40;
		a[4]=50;
		
		System.out.println("Print element at index 3 "+a[3]);
		
		//foreach enhanced for loop
		for(int x:a) {
			System.out.print(x+", ");
		}
		
		String fruits[]= {"apple","banana","pineapple","mango"};
		
		//print all elements
		System.out.println("Length of array "+fruits.length);
		for(int i=0;i<fruits.length;i++) {
			System.out.print(fruits[i]+ ", ");
		}
	}
}
___________________________________________________________________________________________________

Multi dimentional Array
____________________________________________________________
package com.simplilearn.polymorphism;

public class TwoDimeArray {

	public static void main(String[] args) {
		
		int a[][]= {{1,2},{3,4},{5,6}}; //3 rows and 2 columns
		
		System.out.println("2nd row 2nd column: "+a[1][1]);
		
		System.out.println("Print full array");
		
		for(int row=0;row<3;row++) {
			
			for(int col=0;col<2;col++) {
				System.out.print(a[row][col] +"         ");
			}
			
			System.out.println();
		}
	}
}
______________________________________________________________________________________________

Regex: Regular Expression

basically required to validate the String inputs

example we can validate email, password , mobile etc.

_____________________________________________________________________________
package com.simplilearn.polymorphism;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexDemo {

	public static void main(String[] args) {
		
		String regex="[a-z]+";
		
		String input="sonam";
		
		Pattern p= Pattern.compile(regex);
		Matcher m= p.matcher(input);
		
		if(m.matches())
			System.out.println("pattern matched");
		else
			System.out.println("Not matched");
		
	}
}

__________________________________________________________________________________

package com.simplilearn.polymorphism;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexDemo {

	public static void main(String[] args) {
		
		String regex="[987]{3}[0-9]{7}";
		
		String input="9676893025";
		
		Pattern p= Pattern.compile(regex);
		Matcher m= p.matcher(input);
		
		if(m.matches())
			System.out.println("Valid mobile number");
		else
			System.out.println("Not Valid Mobile Number");
		
	}
}
_____________________________________________________________________________________






