********Write Up:
word file
mention your project details

what you understood

the logics which you have implemented in your project

what are the diffrent topics of java you have implemented in your programm you need to explain.

*****Source Code:

Create a word and copy and paste all the codes which you have created.

*********Screenshot

create word file and submit output screenshot of your application.
	provide dirrent output screenshots

************Additional Remarks:
extra things write that
add github link of your project

______________________________________________________________________________________________
Inner class
(nested class , class inside a class)

to implement security
___________________________________________
package com.simplilearn.polymorphism;

public class Outer {

	public int a=20;
	private String key="Secret";
	
	class Inner{
		
		void display() {
			System.out.println("Value "+a);
			System.out.println("Key "+key);
		}
	}
	
	
	public static void main(String[] args) {
		Outer outerObject= new Outer(); //outside class object
		Outer.Inner innerObject= outerObject.new Inner();
		//use outsideClass Object to create Inner class object
		
		innerObject.display(); //call inner class method
	}
}

________________________________________________________________________________

you can also write a class in any block (in method, if block, else block,loop)

which is called as LocalInnerClass.


Perticularly If you write a class Inside a method It is called as a methodLocalInnerClass
___________________________________________________________________________________________

package com.simplilearn.polymorphism;

public class MethodLocalInnerClass {

	public void display() {
		
		class Inner {
			
			int a=10;
			void test() {
				if(a==10)
					System.out.println("Valid");
				else
					System.out.println("Not valid");
			}
		}
		
		//we can use this class here only(inside a method)
		Inner i=new Inner();
		i.test();
	}
	
	
	public static void main(String[] args) {
		MethodLocalInnerClass obj= new MethodLocalInnerClass();
		obj.display();
	}
}

________________________________________________________________________________________

Annonymous InnerClass

a class without its Name which is called annonymous Inner class.

package com.simplilearn.inheritance;

public interface Car {

	//all methods of interface are abstract
	//what is abstract? just design no code
	
	public void start();
	public void stop();
	public void changeGear();
	
}


package com.simplilearn.inheritance;

//Basic Implementation
public class Altroz implements Car {

	public void stop() {
		System.out.println("Altroz Stopped");
	}
	public void start() {
		System.out.println("Altroz Started");
	}
	public void changeGear() {
		System.out.println("Altroz Gear Changed");
	}
	

}


package com.simplilearn.inheritance;

public class Demo {

	public static void main(String[] args) {
		
		//Annonymous Implementation
		Car suv= new Car() {
			public void stop() {
				System.out.println("SUV Stopped");
			}
			public void start() {
				System.out.println("SUV Started");
			}
			public void changeGear() {
				System.out.println("SUV Gear Changed");
			}
		};
		
		suv.start();
		suv.stop();
		suv.changeGear();
		//SUV is a single object where using altroz name I can create multiple objects
		
		Altroz a=new Altroz();
		Altroz b= new Altroz();
		Altroz c= new Altroz();
		
		//to use them you just need to use this objects and call the methods
	}
}


____________________________________________________________________________________________________
Note: Car object created using annonymous implementation
